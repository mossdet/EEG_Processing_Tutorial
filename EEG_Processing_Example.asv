%% Setup library paths and initialize fieldtrip
disp('Startup');
[thisFilePath,~,~] = fileparts(mfilename('fullpath'));
cd(thisFilePath);
run('src/startupScript.m');

%% Define path to EEG file
[eegs_dir, annots_dir, eeg_files] = physio_patients_ls();

for fi = 1:length(eeg_files)
    eegFilepath = strcat(eegs_dir, eeg_files{fi});
    eegFilepath = eegFilepath{1};
    annotsFilepath = strcat(annots_dir, eeg_files{fi});
    annotsFilepath = replace(annotsFilepath, '.edf', '.edf_best_performer_detections.mat');

    assert(isfile(eegFilepath), strcat("EEG File not found: ", eegFilepath));
    assert(isfile(annotsFilepath), strcat("Annotations File not found: ", annotsFilepath));

    %% Load EEG data
    % get sampling rate (fs), nr_samples, mtg_labels and mtg_data
    [fs, nSamples, mtg_labels, mtg_data] = get_scalp_bipolar_data(eegFilepath); 
    eeg_time = (0:nSamples-1)/fs; % Create an array containing the times from each sample    


    %% Load HFO detections data
    hfo_dets = load(annotsFilepath);

    %% Iterate through EEG channels
    for chidx = 1:length(mtg_labels)

        eeg_ch = mtg_labels{chidx};
        disp(strcat("Processing channel", eeg_ch));

        % Process the eeg signal from this channel
        [freqs, wavelet_output] = get_signal_cwt(fs, mtg_data(chidx,:));
        chann_bp_signal = get_bandpassed_signal(fs, mtg_data(chidx,:));


        % Select HFO events in this channel
        sel_hfo = cellfun(@(x) strcmpi(x, eeg_ch), string(hfo_dets.Channel), 'UniformOutput', true)>0;
        nr_ch_hfo = sum(sel_hfo);
        ch_hfo_events_start = hfo_dets.StartSample(sel_hfo);
        ch_hfo_events_end= hfo_dets.EndSample(sel_hfo);

        % Compute the features for each hfo
        for hfo_idx = 1:nr_ch_hfo
            hfo_start = ch_hfo_events_start(hfo_idx);
            
        end
        x = 0;
    end


    %% Apply FIR bandpass filter to first channel
    chann_signal = mtg_data(1,:);
    lw = 80; % low cutoff frequency in Hz
    hw = 500; % high cutoff frequency in Hz
    order = 256; % order must be a pair number
    chann_signal_bandpassed = getBandpassedSignal(fs, order, lw, hw, chann_signal);
    
    %% Get the Morlet Wavelet transform from the first channel, time window of second 10 to 11
    wavelet_low_freq_limit = 80;
    wavelet_high_freq_limit = 500;
    [cfs,frqs, coi] = cwt(chann_signal, 'amor', fs, 'FrequencyLimits',[wavelet_low_freq_limit wavelet_high_freq_limit]);
    absCFS = abs(cfs);
    
    %% Plot raw, bandpassed and spectrogram from second 10 to 11
    samples_selection = 10*fs:11*fs-1;
    time_sel = eeg_time(samples_selection);
    raw_sig_sel = chann_signal(samples_selection);
    bp_sig_sel = chann_signal_bandpassed(samples_selection);
    spect_sel = absCFS(:, samples_selection);
    
    figure(1)
    subplot(3,1,1);
    plot(time_sel, raw_sig_sel, '-k', 'LineWidth', 0.1)
    title('Raw Signal')
    ylabel("Voltage (uV)")
    
    subplot(3,1,2);
    plot(time_sel, bp_sig_sel, '-k', 'LineWidth', 0.1)
    title('Bandpassed Signal')
    ylabel("Voltage (uV)")
    
    subplot(3,1,3);
    contour(time_sel, frqs, spect_sel, 'LineStyle','none', 'LineColor',[0 0 0], 'Fill','on', 'Tag', 'heatmap');
    title("Wavelet Transform")
    ylabel("Frequency (Hz)")
    xlabel("Time (s)")
end